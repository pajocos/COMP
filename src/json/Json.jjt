options{  LOOKAHEAD= 1;  STATIC = false;}PARSER_BEGIN(Json)package json;import java.io.FileNotFoundException;import java.util.Vector;public class Json{  public static void main(String args []) throws ParseException, FileNotFoundException  {    Json json = new Json(new java.io.FileInputStream(args [0]));    SimpleNode root = json.Expression();    root.dump("");    SimpleNode nodes = (SimpleNode) root.jjtGetChild(0);    SimpleNode links = (SimpleNode) root.jjtGetChild(1);    ArrayNode [] newNodes = processNodes(nodes);    ArrayLink [] newLinks = processLinks(links);  }  public static ArrayNode [] processNodes(SimpleNode nodes)  {    ArrayNode [] newNodes = new ArrayNode [nodes.jjtGetNumChildren()];    for (int i = 0; i < nodes.jjtGetNumChildren(); i++)    {      ArrayNode an = new ArrayNode();      an.setName(nodes.jjtGetChild(i).jjtGetChild(0).getNodeValue());      an.setGroup(Integer.parseInt(nodes.jjtGetChild(i).jjtGetChild(1).getNodeValue()));      newNodes [i] = an;    }    return newNodes;  }  public static ArrayLink [] processLinks(SimpleNode links)  {    ArrayLink [] newLinks = new ArrayLink [links.jjtGetNumChildren()];    for (int i = 0; i < links.jjtGetNumChildren(); i++)    {      ArrayLink an = new ArrayLink();      an.setSource(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(0).getNodeValue()));      an.setTarget(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(1).getNodeValue()));      an.setValue(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(2).getNodeValue()));      newLinks [i] = an;    }    return newLinks;  }}PARSER_END(Json)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < NODES : "\"nodes\"" >| < LINKS : "\"links\"" >| < NAME : "\"name\"" >| < GROUP : "\"group\"" >| < SOURCE : "\"source\"" >| < TARGET : "\"target\"" >| < VALUE : "\"value\"" >| < INTEGER : ([ "0"-"9" ])+ >| < LETTER : ([ ".", "a"-"z", "A"-"Z", "0"-"9" ])+ >| < OBRACKET : "{" >| < CBRACKET : "}" >| < OBRA : "[" >| < CBRA : "]" >| < TD : ":" >| < COMMA : "," >| < QUOTE : "\"" >}SimpleNode Expression() #Start_Exp :{}{  Expression1()  {    return jjtThis;  }}void Expression1() #void :{}{  < OBRACKET > < NODES > < TD > < OBRA > Expression2() < CBRA > < COMMA > < LINKS > < TD > < OBRA > Expression3() < CBRA > < CBRACKET >}void Expression2() #nodes :{}{  Expression4()  (    < COMMA > Expression4()  )*}void Expression3() #links :{}{  Expression5()  (    < COMMA > Expression5()  )*}void Expression4() #node :{}{  < OBRACKET > < NAME > < TD > < QUOTE > Expression6() < QUOTE > < COMMA > < GROUP > < TD > Expression7() < CBRACKET >}void Expression5() #link :{}{  < OBRACKET > < SOURCE > < TD > Expression7() < COMMA > < TARGET > < TD > Expression7() < COMMA > < VALUE > < TD > Expression7() < CBRACKET >}void Expression6() #void :{  Token t;}{  t = < LETTER > #Name  {    jjtThis.setNodeValue(t.image.toString());  }}void Expression7() #void :{  Token t;}{  t = < INTEGER > #Int  {    jjtThis.setNodeValue(t.image.toString());  }}JAVACODE void error_skipto(int kind){  ParseException e = generateParseException(); // generate the exception object.  System.out.println  (    e.toString()  )  ;  Token t;  do  {    t = getNextToken();  }  while (t.kind != kind);}