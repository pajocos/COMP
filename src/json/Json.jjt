options{  LOOKAHEAD= 1;  STATIC = false;}PARSER_BEGIN(Json)package json;import java.io.FileNotFoundException;public class Json{  public static void main(String args []) throws ParseException, FileNotFoundException  {    Json json = new Json(new java.io.FileInputStream(args [0]));    SimpleNode root = json.Expression();    root.dump("");  }}PARSER_END(Json)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < NODES : "\"nodes\"" >| < LINKS : "\"links\"" >| < NAME : "\"name\"" >| < GROUP : "\"group\"" >| < SOURCE : "\"source\"" >| < TARGET : "\"target\"" >| < VALUE : "\"value\"" >| < INTEGER : ([ "0"-"9" ])+ >| < LETTER : ([ ".", "a"-"z", "A"-"Z", "0"-"9" ])+ >| < OBRACKET : "{" >| < CBRACKET : "}" >| < OBRA : "[" >| < CBRA : "]" >| < TD : ":" >| < COMMA : "," >| < QUOTE : "\"" >}SimpleNode Expression() #Start_Exp :{}{  Expression1()  {    return jjtThis;  }}void Expression1() #void :{}{  < OBRACKET > < NODES > < TD > < OBRA > Expression2() < CBRA > < COMMA > < LINKS > < TD > < OBRA > Expression3() < CBRA > < CBRACKET >}void Expression2() #nodes :{}{  Expression4()  (    < COMMA > Expression4()  )*}void Expression3() #links :{}{  Expression5()  (    < COMMA > Expression5()  )*}void Expression4() #node :{}{  < OBRACKET > < NAME > < TD > < QUOTE > < LETTER > < QUOTE > < COMMA > < GROUP > < TD > < INTEGER > < CBRACKET >}void Expression5() #link :{}{  < OBRACKET > < SOURCE > < TD > < INTEGER > < COMMA > < TARGET > < TD > < INTEGER > < COMMA > < VALUE > < TD > < INTEGER > < CBRACKET >}JAVACODE void error_skipto(int kind){  ParseException e = generateParseException(); // generate the exception object.  System.out.println  (    e.toString()  )  ; // print the error message  Token t;  do  {    t = getNextToken();  }  while (t.kind != kind);}