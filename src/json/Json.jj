/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Json.jj */
/*@egen*/options{  LOOKAHEAD= 1;  STATIC = false;}PARSER_BEGIN(Json)package json;import java.io.FileNotFoundException;import java.util.Vector;public class Json/*@bgen(jjtree)*/implements JsonTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTJsonState jjtree = new JJTJsonState();

/*@egen*/  public static void main(String args []) throws ParseException, FileNotFoundException  {    Json json = new Json(new java.io.FileInputStream(args [0]));    SimpleNode root = json.Expression();    root.dump("");    SimpleNode nodes = (SimpleNode) root.jjtGetChild(0);    SimpleNode links = (SimpleNode) root.jjtGetChild(1);    ArrayNode [] newNodes = processNodes(nodes);    ArrayLink [] newLinks = processLinks(links);  }  public static ArrayNode [] processNodes(SimpleNode nodes)  {    ArrayNode [] newNodes = new ArrayNode [nodes.jjtGetNumChildren()];    for (int i = 0; i < nodes.jjtGetNumChildren(); i++)    {      ArrayNode an = new ArrayNode();      an.setName(nodes.jjtGetChild(i).jjtGetChild(0).getNodeValue());      an.setGroup(Integer.parseInt(nodes.jjtGetChild(i).jjtGetChild(1).getNodeValue()));      newNodes [i] = an;    }    return newNodes;  }  public static ArrayLink [] processLinks(SimpleNode links)  {    ArrayLink [] newLinks = new ArrayLink [links.jjtGetNumChildren()];    for (int i = 0; i < links.jjtGetNumChildren(); i++)    {      ArrayLink an = new ArrayLink();      an.setSource(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(0).getNodeValue()));      an.setTarget(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(1).getNodeValue()));      an.setValue(Integer.parseInt(links.jjtGetChild(i).jjtGetChild(2).getNodeValue()));      newLinks [i] = an;    }    return newLinks;  }}PARSER_END(Json)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < NODES : "\"nodes\"" >| < LINKS : "\"links\"" >| < NAME : "\"name\"" >| < GROUP : "\"group\"" >| < SOURCE : "\"source\"" >| < TARGET : "\"target\"" >| < VALUE : "\"value\"" >| < INTEGER : ([ "0"-"9" ])+ >| < LETTER : ([ ".", "a"-"z", "A"-"Z", "0"-"9" ])+ >| < OBRACKET : "{" >| < CBRACKET : "}" >| < OBRA : "[" >| < CBRA : "]" >| < TD : ":" >| < COMMA : "," >| < QUOTE : "\"" >}SimpleNode Expression()            :{/*@bgen(jjtree) Start_Exp */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART_EXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start_Exp */
  try {
/*@egen*/  Expression1()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression1()       :{}{  < OBRACKET > < NODES > < TD > < OBRA > Expression2() < CBRA > < COMMA > < LINKS > < TD > < OBRA > Expression3() < CBRA > < CBRACKET >}void Expression2()        :{/*@bgen(jjtree) nodes */
  SimpleNode jjtn000 = new SimpleNode(JJTNODES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) nodes */
  try {
/*@egen*/  Expression4()  (    < COMMA > Expression4()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression3()        :{/*@bgen(jjtree) links */
  SimpleNode jjtn000 = new SimpleNode(JJTLINKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) links */
  try {
/*@egen*/  Expression5()  (    < COMMA > Expression5()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression4()       :{/*@bgen(jjtree) node */
  SimpleNode jjtn000 = new SimpleNode(JJTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) node */
  try {
/*@egen*/  < OBRACKET > < NAME > < TD > < QUOTE > Expression6() < QUOTE > < COMMA > < GROUP > < TD > Expression7() < CBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression5()       :{/*@bgen(jjtree) link */
  SimpleNode jjtn000 = new SimpleNode(JJTLINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) link */
  try {
/*@egen*/  < OBRACKET > < SOURCE > < TD > Expression7() < COMMA > < TARGET > < TD > Expression7() < COMMA > < VALUE > < TD > Expression7() < CBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expression6()       :{  Token t;}{/*@bgen(jjtree) Name */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  t = < LETTER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        {    jjtn000.setNodeValue(t.image.toString());  }}void Expression7()       :{  Token t;}{/*@bgen(jjtree) Int */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  t = < INTEGER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       {    jjtn000.setNodeValue(t.image.toString());  }}JAVACODE void error_skipto(int kind){/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/  ParseException e = generateParseException(); // generate the exception object.  System.out.println  (    e.toString()  )  ;  Token t;  do  {    t = getNextToken();  }  while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}